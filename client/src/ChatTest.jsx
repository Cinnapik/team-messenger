import React, { useEffect, useState } from "react";
import * as signalR from "@microsoft/signalr";

/*
  ChatTest.jsx
  - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ ReceiveMessage —Å –ø–æ–ª–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º msg
  - –ü–æ–º–µ—á–∞–µ—Ç –∫–∞–∂–¥—ã–π div —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–º data-message-id
  - –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ window.scrollToMessageId (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑ Kanban), —Å–∫—Ä–æ–ª–ª–∏—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
  - –ú–µ–Ω—é —É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–ª–∏–∫—É/hover (—Å–º. —Å—Ç–∏–ª–∏)
*/

export default function ChatTest() {
  const [connection, setConnection] = useState(null);
  const [messages, setMessages] = useState([]);
  const [text, setText] = useState("");
  const [openMenuIndex, setOpenMenuIndex] = useState(null);
  const messagesEndRef = React.useRef(null);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å id –∏ CreatedAt)
    fetch("http://localhost:5028/api/messages")
      .then(r => r.json())
      .then(data => setMessages(data || []))
      .catch(err => console.error("History fetch error:", err));

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SignalR
    const conn = new signalR.HubConnectionBuilder()
      .withUrl("http://localhost:5028/hubs/chat")
      .withAutomaticReconnect()
      .configureLogging(signalR.LogLevel.Information)
      .build();

    conn.start()
      .then(() => console.log("SignalR connected"))
      .catch(err => console.error("SignalR start error:", err));

    // –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    conn.on("ReceiveMessage", (msg) => {
      console.log("ReceiveMessage event:", msg);
      setMessages(prev => [...prev, {
        id: msg.id ?? msg.Id ?? null,
        user: msg.user ?? msg.User ?? "Unknown",
        text: msg.text ?? msg.Text ?? "",
        createdAt: msg.createdAt ?? msg.CreatedAt,
        taskId: msg.taskId ?? msg.TaskId ?? null
      }]);
    });

    setConnection(conn);

    return () => {
      conn.stop().catch(() => {});
    };
  }, []);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –ø—Ä–∏—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫—Ä–æ–ª–ª–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    if (window.scrollToMessageId) {
      const id = window.scrollToMessageId;
      window.scrollToMessageId = null;
      // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ data-message-id
      const el = document.querySelector(`[data-message-id="${id}"]`);
      if (el) {
        el.scrollIntoView({ behavior: "smooth", block: "center" });
        // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)
        el.style.transition = "box-shadow 0.3s";
        el.style.boxShadow = "0 0 0 3px rgba(30,144,255,0.12)";
        setTimeout(() => { el.style.boxShadow = ""; }, 1600);
      } else {
        console.warn("Message element not found for id", id);
      }
    }
  }, [messages]);

  // –ù–µ–±–æ–ª—å—à–∞—è rule-based –ø–æ–¥—Å–∫–∞–∑–∫–∞ (–ø–æ–º–æ—â–Ω–∏–∫)
  function getSuggestions(text) {
    const rules = [
      { kw: ["–æ—à–∏–±–∫", "bug", "—Ñ–∏–∫—Å"], title: "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É", description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: ${text}` },
      { kw: ["—Ä–µ—Ñ–∞–∫—Ç–æ—Ä", "–æ–ø—Ç–∏–º–∏–∑"], title: "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", description: `–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: ${text}` },
      { kw: ["–¥–æ–±–∞–≤", "—Ä–µ–∞–ª–∏–∑"], title: "–î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", description: `–î–æ–±–∞–≤–∏—Ç—å: ${text}` }
    ];
    const low = (text || "").toLowerCase();
    return rules.filter(r => r.kw.some(k => low.includes(k))).map(r => ({ title: r.title, description: r.description }));
  }

  const createTaskFromMessage = async (message) => {
    const title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", (message.text || "").slice(0, 50));
    if (!title) return;
    const desc = prompt("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", message.text || "") || "";
    try {
      const res = await fetch("http://localhost:5028/api/tasks", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ title, description: desc, status: "todo" })
      });
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏");
      const created = await res.json();
      // –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ, –µ—Å–ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å id
      if (message.id) {
        await fetch(`http://localhost:5028/api/messages/${message.id}/assignTask/${created.id}`, { method: "PATCH" });
        // –æ–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π state, –ø–æ—Å—Ç–∞–≤–∏–≤ taskId —É —Å–æ–æ–±—â–µ–Ω–∏—è
        setMessages(prev => prev.map(m => m.id === message.id ? { ...m, taskId: created.id } : m));
      }
      if (window.fetchTasksGlobal) window.fetchTasksGlobal();
      alert("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞");
      setOpenMenuIndex(null);
    } catch (e) {
      console.error(e);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
    }
  };

  const assistantAction = (message) => {
    const suggestions = getSuggestions(message.text);
    if (!suggestions.length) return alert("–ü–æ–º–æ—â–Ω–∏–∫: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç");
    const s = suggestions[0];
    if (confirm(`–ü–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:\n${s.title}\n\n–°–æ–∑–¥–∞—Ç—å?`)) {
      fetch("http://localhost:5028/api/tasks", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ title: s.title, description: s.description, status: "todo" })
      }).then(async (r) => {
        if (r.ok) {
          const created = await r.json();
          if (message.id) {
            await fetch(`http://localhost:5028/api/messages/${message.id}/assignTask/${created.id}`, { method: "PATCH" });
            setMessages(prev => prev.map(m => m.id === message.id ? { ...m, taskId: created.id } : m));
          }
          if (window.fetchTasksGlobal) window.fetchTasksGlobal();
          alert("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞");
        } else {
          alert("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏");
        }
      });
    }
    setOpenMenuIndex(null);
  };

  const deleteMessage = async (message) => {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?")) return;
    if (message.id) await fetch(`http://localhost:5028/api/messages/${message.id}`, { method: "DELETE" });
    setMessages(prev => prev.filter(m => m !== message && m.id !== message.id));
    setOpenMenuIndex(null);
  };

  const send = async () => {
    if (!text) return;
    if (!connection || connection.state !== "Connected") { alert("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"); return; }
    try {
      await connection.invoke("SendMessage", "You", text, null);
      setText("");
    } catch (e) {
      console.error("Invoke error:", e);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
    }
  };

  return (
    <div className="panel chat-panel">
      <div className="chat-status">{(!connection || connection.state !== "Connected") ? "–û—Ç–∫–ª—é—á–µ–Ω–æ" : "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"}</div>

      <div className="chat-history" role="list">
        {messages.map((m, i) => (
          <div
            key={i}
            className="msg"
            data-message-id={m.id ?? ""}
            role="listitem"
            onMouseEnter={() => setOpenMenuIndex(i)}
            onMouseLeave={() => setOpenMenuIndex((idx) => idx === i ? null : idx)}
          >
            <div className="msg-header">
              <div style={{ display: "flex", gap: 8, alignItems: "center" }}>
                <div className="msg-user">{m.user}</div>
                <div className="msg-time">{m.createdAt ? new Date(m.createdAt).toLocaleString() : ""}</div>
                {m.taskId ? <span style={{ marginLeft: 8, fontSize: 12, color: "#9aa3b2" }}>üîó –ó–∞–¥–∞—á–∞ #{m.taskId}</span> : null}
              </div>

              <div>
                <button
                  className="msg-menu-btn"
                  aria-label="–ú–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏—è"
                  onClick={(e) => { e.stopPropagation(); setOpenMenuIndex(openMenuIndex === i ? null : i); }}
                >
                  &#x22EE;
                </button>

                <div className={`msg-menu ${openMenuIndex === i ? "" : "hidden"}`} onClick={(e) => e.stopPropagation()}>
                  <button onClick={() => createTaskFromMessage(m)}>–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</button>
                  <button onClick={() => assistantAction(m)}>–ü–æ–º–æ—â–Ω–∏–∫</button>
                  <button onClick={() => deleteMessage(m)} style={{ color: "var(--danger)" }}>–£–¥–∞–ª–∏—Ç—å</button>
                </div>
              </div>
            </div>

            <div className="msg-text">{m.text}</div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>

      <div className="chat-input-row" style={{ marginTop: 8 }}>
        <input className="chat-input" value={text} onChange={e => setText(e.target.value)} placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
        <button className="btn btn-primary" onClick={send} disabled={!connection || connection.state !== "Connected"} style={{ padding: "8px 12px" }}>
          {(!connection || connection.state !== "Connected") ? "–û—Ç–∫–ª—é—á–µ–Ω–æ" : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
        </button>
      </div>
    </div>
  );
}
